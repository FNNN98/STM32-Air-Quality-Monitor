
AirQuality_STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08004dd8  08004dd8  00005dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800559c  0800559c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a4  080055a4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080055ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  20000068  08005614  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  08005614  000077c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc30  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002274  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00014f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000880  00000000  00000000  00015a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031cb  00000000  00000000  000162e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed42  00000000  00000000  000194b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008906e  00000000  00000000  000281f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  000b12a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000b4500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dc0 	.word	0x08004dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004dc0 	.word	0x08004dc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b097      	sub	sp, #92	@ 0x5c
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 ff85 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f85b 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f97b 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000582:	f000 f951 	bl	8000828 <MX_DMA_Init>
  MX_I2C1_Init();
 8000586:	f000 f8bd 	bl	8000704 <MX_I2C1_Init>
  MX_SPI1_Init();
 800058a:	f000 f917 	bl	80007bc <MX_SPI1_Init>
  MX_I2C2_Init();
 800058e:	f000 f8e7 	bl	8000760 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(); // Initialize SSD1306
 8000592:	f000 fafd 	bl	8000b90 <ssd1306_Init>
  PMSA003I_Init(&hi2c2, &sensor_data);  // Initialize PMSA003i and its struct
 8000596:	4920      	ldr	r1, [pc, #128]	@ (8000618 <main+0xa8>)
 8000598:	4820      	ldr	r0, [pc, #128]	@ (800061c <main+0xac>)
 800059a:	f000 f9dd 	bl	8000958 <PMSA003I_Init>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // Pulling SET High
  HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 4);
 800059e:	2304      	movs	r3, #4
 80005a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000620 <main+0xb0>)
 80005a2:	4920      	ldr	r1, [pc, #128]	@ (8000624 <main+0xb4>)
 80005a4:	4820      	ldr	r0, [pc, #128]	@ (8000628 <main+0xb8>)
 80005a6:	f003 fb1d 	bl	8003be4 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  pmsa003i_ReadData(&sensor_data);
 80005aa:	481b      	ldr	r0, [pc, #108]	@ (8000618 <main+0xa8>)
 80005ac:	f000 fa0f 	bl	80009ce <pmsa003i_ReadData>
	  strcpy(line1, "OK ");
 80005b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005b4:	4a1d      	ldr	r2, [pc, #116]	@ (800062c <main+0xbc>)
 80005b6:	601a      	str	r2, [r3, #0]
	  //strcpy(line2, sensor_data.particles_10um);
	  sprintf(line3, "%u", sensor_data.pm10_standard);
 80005b8:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <main+0xa8>)
 80005ba:	885b      	ldrh	r3, [r3, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	491b      	ldr	r1, [pc, #108]	@ (8000630 <main+0xc0>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 ff5b 	bl	8004480 <siprintf>
	  sprintf(line4, "%u", sensor_data.pm25_standard);
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <main+0xa8>)
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	461a      	mov	r2, r3
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4916      	ldr	r1, [pc, #88]	@ (8000630 <main+0xc0>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 ff52 	bl	8004480 <siprintf>
	  sprintf(line5, "%u", sensor_data.pm100_standard);
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <main+0xa8>)
 80005de:	88db      	ldrh	r3, [r3, #6]
 80005e0:	461a      	mov	r2, r3
 80005e2:	463b      	mov	r3, r7
 80005e4:	4912      	ldr	r1, [pc, #72]	@ (8000630 <main+0xc0>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 ff4a 	bl	8004480 <siprintf>

	  ssd1306_print(line1, line2, line3, line4, line5);
 80005ec:	f107 0410 	add.w	r4, r7, #16
 80005f0:	f107 0220 	add.w	r2, r7, #32
 80005f4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80005f8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80005fc:	463b      	mov	r3, r7
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4623      	mov	r3, r4
 8000602:	f000 fcbb 	bl	8000f7c <ssd1306_print>
	  ssd1306_UpdateScreen();
 8000606:	f000 fb45 	bl	8000c94 <ssd1306_UpdateScreen>
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Pulling RST Low
	  HAL_Delay(2000);
 800060a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800060e:	f000 ffab 	bl	8001568 <HAL_Delay>
	  pmsa003i_ReadData(&sensor_data);
 8000612:	bf00      	nop
 8000614:	e7c9      	b.n	80005aa <main+0x3a>
 8000616:	bf00      	nop
 8000618:	20000244 	.word	0x20000244
 800061c:	200000d8 	.word	0x200000d8
 8000620:	20000268 	.word	0x20000268
 8000624:	20000000 	.word	0x20000000
 8000628:	2000012c 	.word	0x2000012c
 800062c:	00204b4f 	.word	0x00204b4f
 8000630:	08004dd8 	.word	0x08004dd8

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ff56 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fdc5 	bl	8003248 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f942 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2103      	movs	r1, #3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f827 	bl	8003738 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f92c 	bl	800094c <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	@ 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 fd77 	bl	8002234 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f8fe 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C2_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C2_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C2_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C2_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C2_Init+0x50>)
 800079e:	f001 fd49 	bl	8002234 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f8d0 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	40005800 	.word	0x40005800
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	@ (8000824 <MX_SPI1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007f0:	2218      	movs	r2, #24
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_SPI1_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_SPI1_Init+0x64>)
 800080e:	f003 f95f 	bl	8003ad0 <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 f898 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000012c 	.word	0x2000012c
 8000824:	40013000 	.word	0x40013000

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_DMA_Init+0x4c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <MX_DMA_Init+0x4c>)
 8000838:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x4c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2038      	movs	r0, #56	@ 0x38
 8000850:	f000 ff89 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000854:	2038      	movs	r0, #56	@ 0x38
 8000856:	f000 ffa2 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	203a      	movs	r0, #58	@ 0x3a
 8000860:	f000 ff81 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000864:	203a      	movs	r0, #58	@ 0x3a
 8000866:	f000 ff9a 	bl	800179e <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_GPIO_Init+0xc8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a2a      	ldr	r2, [pc, #168]	@ (8000940 <MX_GPIO_Init+0xc8>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a23      	ldr	r2, [pc, #140]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_GPIO_Init+0xc8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0xcc>)
 80008ea:	f001 fc89 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008f4:	4814      	ldr	r0, [pc, #80]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008f6:	f001 fc83 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_GPIO_Init+0xcc>)
 8000914:	f001 faf0 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000918:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_GPIO_Init+0xd0>)
 8000932:	f001 fae1 	bl	8001ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020800 	.word	0x40020800
 8000948:	40020400 	.word	0x40020400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <PMSA003I_Init>:
#include "stm32f4xx_hal.h" // Include the appropriate STM32 HAL header file
#include <string.h>
#include <stdbool.h>
#include "pmsa003i.h"

void PMSA003I_Init(I2C_HandleTypeDef *i2cHandle, PMSA003I *dev){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    dev->framelen = 0;            // Initial value for framelen
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	801a      	strh	r2, [r3, #0]
    dev->pm10_standard = 0;       // Initial value for pm10_standard
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	805a      	strh	r2, [r3, #2]
    dev->pm25_standard = 0;       // Initial value for pm25_standard
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	809a      	strh	r2, [r3, #4]
    dev->pm100_standard = 0;      // Initial value for pm100_standard
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	80da      	strh	r2, [r3, #6]
    dev->pm10_env = 0;            // Initial value for pm10_env
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	811a      	strh	r2, [r3, #8]
    dev->pm25_env = 0;            // Initial value for pm25_env
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	815a      	strh	r2, [r3, #10]
    dev->pm100_env = 0;           // Initial value for pm100_env
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2200      	movs	r2, #0
 800098a:	819a      	strh	r2, [r3, #12]
    dev->particles_03um = 0;      // Initial value for particles_03um
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	81da      	strh	r2, [r3, #14]
    dev->particles_05um = 0;      // Initial value for particles_05um
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	821a      	strh	r2, [r3, #16]
    dev->particles_10um = 0;      // Initial value for particles_10um
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	825a      	strh	r2, [r3, #18]
    dev->particles_25um = 0;      // Initial value for particles_25um
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	829a      	strh	r2, [r3, #20]
    dev->particles_50um = 0;      // Initial value for particles_50um
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2200      	movs	r2, #0
 80009a8:	82da      	strh	r2, [r3, #22]
    dev->particles_100um = 0;     // Initial value for particles_100um
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	831a      	strh	r2, [r3, #24]
    dev->unused = 0;              // Initial value for unused
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	835a      	strh	r2, [r3, #26]
    dev->checksum = 0;            // Initial value for checksum
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2200      	movs	r2, #0
 80009ba:	839a      	strh	r2, [r3, #28]
    dev->i2cHandle	= i2cHandle;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	621a      	str	r2, [r3, #32]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <pmsa003i_ReadData>:

bool pmsa003i_ReadData(PMSA003I *dev) {
 80009ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d2:	b091      	sub	sp, #68	@ 0x44
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	466b      	mov	r3, sp
 80009da:	461e      	mov	r6, r3
    const uint8_t num_bytes = 32;
 80009dc:	2320      	movs	r3, #32
 80009de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t buffer[num_bytes];
 80009e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009e6:	3b01      	subs	r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ee:	2200      	movs	r2, #0
 80009f0:	4698      	mov	r8, r3
 80009f2:	4691      	mov	r9, r2
 80009f4:	f04f 0200 	mov.w	r2, #0
 80009f8:	f04f 0300 	mov.w	r3, #0
 80009fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	461c      	mov	r4, r3
 8000a10:	4615      	mov	r5, r2
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	00eb      	lsls	r3, r5, #3
 8000a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a20:	00e2      	lsls	r2, r4, #3
 8000a22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a26:	3307      	adds	r3, #7
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a30:	ab02      	add	r3, sp, #8
 8000a32:	3300      	adds	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_I2C_Master_Receive(dev->i2cHandle, PMSA003I_ADDRESS, buffer, num_bytes, HAL_MAX_DELAY);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a18      	ldr	r0, [r3, #32]
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	9200      	str	r2, [sp, #0]
 8000a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a48:	2112      	movs	r1, #18
 8000a4a:	f001 fd37 	bl	80024bc <HAL_I2C_Master_Receive>

    if (buffer[0] != 0x42) {
 8000a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b42      	cmp	r3, #66	@ 0x42
 8000a54:	d001      	beq.n	8000a5a <pmsa003i_ReadData+0x8c>
        return false;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e05a      	b.n	8000b10 <pmsa003i_ReadData+0x142>
    }

    int16_t sum = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    for (uint8_t i = 0; i < 30; i++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000a64:	e00d      	b.n	8000a82 <pmsa003i_ReadData+0xb4>
        sum += buffer[i];
 8000a66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	86fb      	strh	r3, [r7, #54]	@ 0x36
    for (uint8_t i = 0; i < 30; i++) {
 8000a78:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000a82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a86:	2b1d      	cmp	r3, #29
 8000a88:	d9ed      	bls.n	8000a66 <pmsa003i_ReadData+0x98>
    }

    uint16_t buffer_u16[15];
    for (uint8_t i = 0; i < 15; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000a90:	e02a      	b.n	8000ae8 <pmsa003i_ReadData+0x11a>
        buffer_u16[i] = buffer[2 + i * 2 + 1];
 8000a92:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a96:	3301      	adds	r3, #1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a9e:	5cd2      	ldrb	r2, [r2, r3]
 8000aa0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	3338      	adds	r3, #56	@ 0x38
 8000aa8:	443b      	add	r3, r7
 8000aaa:	f823 2c30 	strh.w	r2, [r3, #-48]
        buffer_u16[i] += (buffer[2 + i * 2] << 8);
 8000aae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	3338      	adds	r3, #56	@ 0x38
 8000ab6:	443b      	add	r3, r7
 8000ab8:	f833 1c30 	ldrh.w	r1, [r3, #-48]
 8000abc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ad0:	440a      	add	r2, r1
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3338      	adds	r3, #56	@ 0x38
 8000ad8:	443b      	add	r3, r7
 8000ada:	f823 2c30 	strh.w	r2, [r3, #-48]
    for (uint8_t i = 0; i < 15; i++) {
 8000ade:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000ae8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000aec:	2b0e      	cmp	r3, #14
 8000aee:	d9d0      	bls.n	8000a92 <pmsa003i_ReadData+0xc4>
    }

    memcpy((void *)dev, (void *)buffer_u16, 30);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	221e      	movs	r2, #30
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f003 fd2f 	bl	800455c <memcpy>

    if (sum != dev->checksum) {
 8000afe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	8b92      	ldrh	r2, [r2, #28]
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d001      	beq.n	8000b0e <pmsa003i_ReadData+0x140>
        return false;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <pmsa003i_ReadData+0x142>
    }

    return true;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	46b5      	mov	sp, r6
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	373c      	adds	r7, #60	@ 0x3c
 8000b16:	46bd      	mov	sp, r7
 8000b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b1c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af04      	add	r7, sp, #16
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	2200      	movs	r2, #0
 8000b48:	2178      	movs	r1, #120	@ 0x78
 8000b4a:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <ssd1306_WriteCommand+0x2c>)
 8000b4c:	f001 fee8 	bl	8002920 <HAL_I2C_Mem_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000084 	.word	0x20000084

08000b5c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af04      	add	r7, sp, #16
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6e:	9202      	str	r2, [sp, #8]
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	2240      	movs	r2, #64	@ 0x40
 8000b7a:	2178      	movs	r1, #120	@ 0x78
 8000b7c:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <ssd1306_WriteData+0x30>)
 8000b7e:	f001 fecf 	bl	8002920 <HAL_I2C_Mem_Write>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000084 	.word	0x20000084

08000b90 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b94:	f7ff ffc2 	bl	8000b1c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b98:	2064      	movs	r0, #100	@ 0x64
 8000b9a:	f000 fce5 	bl	8001568 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f9ce 	bl	8000f40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	f7ff ffc1 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff ffbe 	bl	8000b2c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bb0:	20b0      	movs	r0, #176	@ 0xb0
 8000bb2:	f7ff ffbb 	bl	8000b2c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bb6:	20c8      	movs	r0, #200	@ 0xc8
 8000bb8:	f7ff ffb8 	bl	8000b2c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ffb5 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	f7ff ffb2 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bc8:	2040      	movs	r0, #64	@ 0x40
 8000bca:	f7ff ffaf 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bce:	20ff      	movs	r0, #255	@ 0xff
 8000bd0:	f000 f9a2 	bl	8000f18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bd4:	20a1      	movs	r0, #161	@ 0xa1
 8000bd6:	f7ff ffa9 	bl	8000b2c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bda:	20a6      	movs	r0, #166	@ 0xa6
 8000bdc:	f7ff ffa6 	bl	8000b2c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000be0:	20a8      	movs	r0, #168	@ 0xa8
 8000be2:	f7ff ffa3 	bl	8000b2c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000be6:	203f      	movs	r0, #63	@ 0x3f
 8000be8:	f7ff ffa0 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bec:	20a4      	movs	r0, #164	@ 0xa4
 8000bee:	f7ff ff9d 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bf2:	20d3      	movs	r0, #211	@ 0xd3
 8000bf4:	f7ff ff9a 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ff97 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bfe:	20d5      	movs	r0, #213	@ 0xd5
 8000c00:	f7ff ff94 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c04:	20f0      	movs	r0, #240	@ 0xf0
 8000c06:	f7ff ff91 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c0a:	20d9      	movs	r0, #217	@ 0xd9
 8000c0c:	f7ff ff8e 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c10:	2022      	movs	r0, #34	@ 0x22
 8000c12:	f7ff ff8b 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c16:	20da      	movs	r0, #218	@ 0xda
 8000c18:	f7ff ff88 	bl	8000b2c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c1c:	2012      	movs	r0, #18
 8000c1e:	f7ff ff85 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c22:	20db      	movs	r0, #219	@ 0xdb
 8000c24:	f7ff ff82 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f7ff ff7f 	bl	8000b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c2e:	208d      	movs	r0, #141	@ 0x8d
 8000c30:	f7ff ff7c 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c34:	2014      	movs	r0, #20
 8000c36:	f7ff ff79 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 f980 	bl	8000f40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f80f 	bl	8000c64 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c46:	f000 f825 	bl	8000c94 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <ssd1306_Init+0xd0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <ssd1306_Init+0xd0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c56:	4b02      	ldr	r3, [pc, #8]	@ (8000c60 <ssd1306_Init+0xd0>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	711a      	strb	r2, [r3, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000066c 	.word	0x2000066c

08000c64 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <ssd1306_Fill+0x14>
 8000c74:	2300      	movs	r3, #0
 8000c76:	e000      	b.n	8000c7a <ssd1306_Fill+0x16>
 8000c78:	23ff      	movs	r3, #255	@ 0xff
 8000c7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <ssd1306_Fill+0x2c>)
 8000c82:	f003 fc37 	bl	80044f4 <memset>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000026c 	.word	0x2000026c

08000c94 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e016      	b.n	8000cce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3b50      	subs	r3, #80	@ 0x50
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff40 	bl	8000b2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff3d 	bl	8000b2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f7ff ff3a 	bl	8000b2c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	01db      	lsls	r3, r3, #7
 8000cbc:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <ssd1306_UpdateScreen+0x4c>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff4a 	bl	8000b5c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d9e5      	bls.n	8000ca0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000026c 	.word	0x2000026c

08000ce4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	71bb      	strb	r3, [r7, #6]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db3d      	blt.n	8000d7a <ssd1306_DrawPixel+0x96>
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d02:	d83a      	bhi.n	8000d7a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d11a      	bne.n	8000d40 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	b2d8      	uxtb	r0, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	01db      	lsls	r3, r3, #7
 8000d16:	4413      	add	r3, r2
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b259      	sxtb	r1, r3
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	4603      	mov	r3, r0
 8000d34:	01db      	lsls	r3, r3, #7
 8000d36:	4413      	add	r3, r2
 8000d38:	b2c9      	uxtb	r1, r1
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d3c:	54d1      	strb	r1, [r2, r3]
 8000d3e:	e01d      	b.n	8000d7c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	01db      	lsls	r3, r3, #7
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b259      	sxtb	r1, r3
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	01db      	lsls	r3, r3, #7
 8000d70:	4413      	add	r3, r2
 8000d72:	b2c9      	uxtb	r1, r1
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d76:	54d1      	strb	r1, [r2, r3]
 8000d78:	e000      	b.n	8000d7c <ssd1306_DrawPixel+0x98>
        return;
 8000d7a:	bf00      	nop
    }
}
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000026c 	.word	0x2000026c

08000d8c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	1d38      	adds	r0, r7, #4
 8000d96:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	4613      	mov	r3, r2
 8000da2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	d902      	bls.n	8000db0 <ssd1306_WriteChar+0x24>
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b7e      	cmp	r3, #126	@ 0x7e
 8000dae:	d901      	bls.n	8000db4 <ssd1306_WriteChar+0x28>
        return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e06c      	b.n	8000e8e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000db4:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2b80      	cmp	r3, #128	@ 0x80
 8000dc0:	dc06      	bgt.n	8000dd0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dc2:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000dc4:	885b      	ldrh	r3, [r3, #2]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dcc:	2b40      	cmp	r3, #64	@ 0x40
 8000dce:	dd01      	ble.n	8000dd4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e05c      	b.n	8000e8e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	e04c      	b.n	8000e74 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3b20      	subs	r3, #32
 8000de0:	7979      	ldrb	r1, [r7, #5]
 8000de2:	fb01 f303 	mul.w	r3, r1, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	440b      	add	r3, r1
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	e034      	b.n	8000e64 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d012      	beq.n	8000e30 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2d8      	uxtb	r0, r3
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e1a:	885b      	ldrh	r3, [r3, #2]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7bba      	ldrb	r2, [r7, #14]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff ff5b 	bl	8000ce4 <ssd1306_DrawPixel>
 8000e2e:	e016      	b.n	8000e5e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e40:	885b      	ldrh	r3, [r3, #2]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2d9      	uxtb	r1, r3
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f7ff ff43 	bl	8000ce4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	793b      	ldrb	r3, [r7, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3c5      	bcc.n	8000dfa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	461a      	mov	r2, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3ad      	bcc.n	8000dda <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	793a      	ldrb	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e8a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000066c 	.word	0x2000066c

08000e9c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	1d38      	adds	r0, r7, #4
 8000ea6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eaa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000eac:	e012      	b.n	8000ed4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	7818      	ldrb	r0, [r3, #0]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	ca06      	ldmia	r2, {r1, r2}
 8000eb8:	f7ff ff68 	bl	8000d8c <ssd1306_WriteChar>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d002      	beq.n	8000ece <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	e008      	b.n	8000ee0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e8      	bne.n	8000eae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <ssd1306_SetCursor+0x2c>)
 8000efe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <ssd1306_SetCursor+0x2c>)
 8000f06:	805a      	strh	r2, [r3, #2]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	2000066c 	.word	0x2000066c

08000f18 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f22:	2381      	movs	r3, #129	@ 0x81
 8000f24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fdff 	bl	8000b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fdfb 	bl	8000b2c <ssd1306_WriteCommand>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f50:	23af      	movs	r3, #175	@ 0xaf
 8000f52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <ssd1306_SetDisplayOn+0x38>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	715a      	strb	r2, [r3, #5]
 8000f5a:	e004      	b.n	8000f66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f5c:	23ae      	movs	r3, #174	@ 0xae
 8000f5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <ssd1306_SetDisplayOn+0x38>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fddf 	bl	8000b2c <ssd1306_WriteCommand>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000066c 	.word	0x2000066c

08000f7c <ssd1306_print>:
    HAL_Delay(3000);
    ssd1306_TestDrawBitmap();
    HAL_Delay(3000);
}

void ssd1306_print(const char *str1, const char *str2, const char *str3, const char *str4, const char *str5) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
    uint8_t y = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]
    ssd1306_Fill(Black);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fe68 	bl	8000c64 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4619      	mov	r1, r3
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff ffa5 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(str1, Font_7x10, White);
 8000f9e:	4a23      	ldr	r2, [pc, #140]	@ (800102c <ssd1306_print+0xb0>)
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	ca06      	ldmia	r2, {r1, r2}
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff79 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	330a      	adds	r3, #10
 8000fae:	75fb      	strb	r3, [r7, #23]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f7ff ff97 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(str2, Font_7x10, White);
 8000fba:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <ssd1306_print+0xb0>)
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	ca06      	ldmia	r2, {r1, r2}
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f7ff ff6b 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	330a      	adds	r3, #10
 8000fca:	75fb      	strb	r3, [r7, #23]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff ff89 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(str3, Font_7x10, White);
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <ssd1306_print+0xb0>)
 8000fd8:	2301      	movs	r3, #1
 8000fda:	ca06      	ldmia	r2, {r1, r2}
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff5d 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	330a      	adds	r3, #10
 8000fe6:	75fb      	strb	r3, [r7, #23]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff ff7b 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(str4, Font_7x10, White);
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <ssd1306_print+0xb0>)
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	ca06      	ldmia	r2, {r1, r2}
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f7ff ff4f 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	330a      	adds	r3, #10
 8001002:	75fb      	strb	r3, [r7, #23]
    #endif

	#ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	4619      	mov	r1, r3
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff ff6d 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(str5, Font_7x10, White);
 800100e:	4a07      	ldr	r2, [pc, #28]	@ (800102c <ssd1306_print+0xb0>)
 8001010:	2301      	movs	r3, #1
 8001012:	ca06      	ldmia	r2, {r1, r2}
 8001014:	6a38      	ldr	r0, [r7, #32]
 8001016:	f7ff ff41 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	330a      	adds	r3, #10
 800101e:	75fb      	strb	r3, [r7, #23]
	#endif
    ssd1306_UpdateScreen();
 8001020:	f7ff fe38 	bl	8000c94 <ssd1306_UpdateScreen>
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_MspInit+0x4c>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001044:	6453      	str	r3, [r2, #68]	@ 0x44
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x4c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a3a      	ldr	r2, [pc, #232]	@ (8001188 <HAL_I2C_MspInit+0x108>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	4b39      	ldr	r3, [pc, #228]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a38      	ldr	r2, [pc, #224]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b36      	ldr	r3, [pc, #216]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010be:	23c0      	movs	r3, #192	@ 0xc0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	482d      	ldr	r0, [pc, #180]	@ (8001190 <HAL_I2C_MspInit+0x110>)
 80010da:	f000 ff0d 	bl	8001ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a29      	ldr	r2, [pc, #164]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010fa:	e041      	b.n	8001180 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <HAL_I2C_MspInit+0x114>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d13c      	bne.n	8001180 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <HAL_I2C_MspInit+0x110>)
 8001140:	f000 feda 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001154:	2309      	movs	r3, #9
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	480c      	ldr	r0, [pc, #48]	@ (8001190 <HAL_I2C_MspInit+0x110>)
 8001160:	f000 feca 	bl	8001ef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_I2C_MspInit+0x10c>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40005400 	.word	0x40005400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020400 	.word	0x40020400
 8001194:	40005800 	.word	0x40005800

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	@ (80012e8 <HAL_SPI_MspInit+0x150>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f040 8092 	bne.w	80012e0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c4:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80011cc:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a42      	ldr	r2, [pc, #264]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <HAL_SPI_MspInit+0x154>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23e0      	movs	r3, #224	@ 0xe0
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001204:	2305      	movs	r3, #5
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4838      	ldr	r0, [pc, #224]	@ (80012f0 <HAL_SPI_MspInit+0x158>)
 8001210:	f000 fe72 	bl	8001ef8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001214:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001216:	4a38      	ldr	r2, [pc, #224]	@ (80012f8 <HAL_SPI_MspInit+0x160>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800121a:	4b36      	ldr	r3, [pc, #216]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800121c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001220:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800124a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800124e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001256:	4827      	ldr	r0, [pc, #156]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 8001258:	f000 fabc 	bl	80017d4 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001262:	f7ff fb73 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800126a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800126c:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <HAL_SPI_MspInit+0x15c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 8001274:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <HAL_SPI_MspInit+0x168>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 800127a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800127e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012b6:	f000 fa8d 	bl	80017d4 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80012c0:	f7ff fb44 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012c8:	649a      	str	r2, [r3, #72]	@ 0x48
 80012ca:	4a0c      	ldr	r2, [pc, #48]	@ (80012fc <HAL_SPI_MspInit+0x164>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2023      	movs	r0, #35	@ 0x23
 80012d6:	f000 fa46 	bl	8001766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012da:	2023      	movs	r0, #35	@ 0x23
 80012dc:	f000 fa5f 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013000 	.word	0x40013000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000184 	.word	0x20000184
 80012f8:	40026410 	.word	0x40026410
 80012fc:	200001e4 	.word	0x200001e4
 8001300:	40026440 	.word	0x40026440

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f8e5 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <SPI1_IRQHandler+0x10>)
 800136a:	f002 fd35 	bl	8003dd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000012c 	.word	0x2000012c

08001378 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <DMA2_Stream0_IRQHandler+0x10>)
 800137e:	f000 fb51 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000184 	.word	0x20000184

0800138c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <DMA2_Stream2_IRQHandler+0x10>)
 8001392:	f000 fb47 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001e4 	.word	0x200001e4

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f003 f898 	bl	8004504 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	20000674 	.word	0x20000674
 8001408:	200007c8 	.word	0x200007c8

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 f857 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff f885 	bl	8000570 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001474:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 8001478:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800147c:	200007c4 	.word	0x200007c4

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	@ (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f94f 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fdba 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f967 	bl	80017ba <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f92f 	bl	8001766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000000c 	.word	0x2000000c
 8001520:	20000014 	.word	0x20000014
 8001524:	20000010 	.word	0x20000010

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000014 	.word	0x20000014
 800154c:	20000678 	.word	0x20000678

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000678 	.word	0x20000678

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000014 	.word	0x20000014

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	@ (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	@ (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	@ 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff8e 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff29 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff3e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff8e 	bl	80016a4 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5d 	bl	8001650 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff31 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa2 	bl	800170c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff feb6 	bl	8001550 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e099      	b.n	8001924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001810:	e00f      	b.n	8001832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001812:	f7ff fe9d 	bl	8001550 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b05      	cmp	r3, #5
 800181e:	d908      	bls.n	8001832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e078      	b.n	8001924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e8      	bne.n	8001812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_DMA_Init+0x158>)
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	2b04      	cmp	r3, #4
 800188a:	d107      	bne.n	800189c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4313      	orrs	r3, r2
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d117      	bne.n	80018f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fa91 	bl	8001e00 <DMA_CheckFifoParam>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018f2:	2301      	movs	r3, #1
 80018f4:	e016      	b.n	8001924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fa48 	bl	8001d94 <DMA_CalcBaseAndBitshift>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	223f      	movs	r2, #63	@ 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	f010803f 	.word	0xf010803f

08001930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_DMA_Start_IT+0x26>
 8001952:	2302      	movs	r3, #2
 8001954:	e040      	b.n	80019d8 <HAL_DMA_Start_IT+0xa8>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12f      	bne.n	80019ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f9da 	bl	8001d38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	223f      	movs	r2, #63	@ 0x3f
 800198a:	409a      	lsls	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0216 	orr.w	r2, r2, #22
 800199e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0208 	orr.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e005      	b.n	80019d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d004      	beq.n	80019fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00c      	b.n	8001a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a30:	4b8e      	ldr	r3, [pc, #568]	@ (8001c6c <HAL_DMA_IRQHandler+0x248>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8e      	ldr	r2, [pc, #568]	@ (8001c70 <HAL_DMA_IRQHandler+0x24c>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4e:	2208      	movs	r2, #8
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aca:	2204      	movs	r2, #4
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d012      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	2204      	movs	r2, #4
 8001aea:	409a      	lsls	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	f043 0204 	orr.w	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	2210      	movs	r2, #16
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03c      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	2210      	movs	r2, #16
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d024      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
 8001b52:	e01f      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	2220      	movs	r2, #32
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 808f 	beq.w	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8087 	beq.w	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bba:	2220      	movs	r2, #32
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d136      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0216 	bic.w	r2, r2, #22
 8001bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_DMA_IRQHandler+0x1da>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	223f      	movs	r2, #63	@ 0x3f
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d07e      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
        }
        return;
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01d      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d031      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
 8001c68:	e02c      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d023      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
 8001c84:	e01e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d032      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d022      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2205      	movs	r2, #5
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d307      	bcc.n	8001d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f2      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x2cc>
 8001d0a:	e000      	b.n	8001d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d30:	bf00      	nop
    }
  }
}
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b40      	cmp	r3, #64	@ 0x40
 8001d64:	d108      	bne.n	8001d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d76:	e007      	b.n	8001d88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3b10      	subs	r3, #16
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <DMA_CalcBaseAndBitshift+0x64>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dae:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <DMA_CalcBaseAndBitshift+0x68>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d909      	bls.n	8001dd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	1d1a      	adds	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dd4:	e007      	b.n	8001de6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dde:	f023 0303 	bic.w	r3, r3, #3
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	aaaaaaab 	.word	0xaaaaaaab
 8001dfc:	08005560 	.word	0x08005560

08001e00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11f      	bne.n	8001e5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d856      	bhi.n	8001ece <DMA_CheckFifoParam+0xce>
 8001e20:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <DMA_CheckFifoParam+0x28>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e4b 	.word	0x08001e4b
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001ecf 	.word	0x08001ecf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d046      	beq.n	8001ed2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e48:	e043      	b.n	8001ed2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e52:	d140      	bne.n	8001ed6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e58:	e03d      	b.n	8001ed6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e62:	d121      	bne.n	8001ea8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d837      	bhi.n	8001eda <DMA_CheckFifoParam+0xda>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <DMA_CheckFifoParam+0x70>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e87 	.word	0x08001e87
 8001e78:	08001e81 	.word	0x08001e81
 8001e7c:	08001e99 	.word	0x08001e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      break;
 8001e84:	e030      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d025      	beq.n	8001ede <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e96:	e022      	b.n	8001ede <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ea0:	d11f      	bne.n	8001ee2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ea6:	e01c      	b.n	8001ee2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d903      	bls.n	8001eb6 <DMA_CheckFifoParam+0xb6>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d003      	beq.n	8001ebc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001eb4:	e018      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eba:	e015      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e00b      	b.n	8001ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e00a      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e008      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e006      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
 8001edc:	e004      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e002      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ee2:	bf00      	nop
 8001ee4:	e000      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e159      	b.n	80021c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 8148 	bne.w	80021c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a2 	beq.w	80021c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b57      	ldr	r3, [pc, #348]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208c:	6453      	str	r3, [r2, #68]	@ 0x44
 800208e:	4b54      	ldr	r3, [pc, #336]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a52      	ldr	r2, [pc, #328]	@ (80021e4 <HAL_GPIO_Init+0x2ec>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a49      	ldr	r2, [pc, #292]	@ (80021e8 <HAL_GPIO_Init+0x2f0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x202>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a48      	ldr	r2, [pc, #288]	@ (80021ec <HAL_GPIO_Init+0x2f4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x1fe>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a47      	ldr	r2, [pc, #284]	@ (80021f0 <HAL_GPIO_Init+0x2f8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a46      	ldr	r2, [pc, #280]	@ (80021f4 <HAL_GPIO_Init+0x2fc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x1f6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x1f2>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4935      	ldr	r1, [pc, #212]	@ (80021e4 <HAL_GPIO_Init+0x2ec>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002168:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800216e:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021bc:	4a0f      	ldr	r2, [pc, #60]	@ (80021fc <HAL_GPIO_Init+0x304>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f aea2 	bls.w	8001f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe ff10 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	@ 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f001 fc06 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	@ (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	@ (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	@ (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	@ (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	@ (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	@ (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	@ (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	461a      	mov	r2, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	817b      	strh	r3, [r7, #10]
 80024cc:	4613      	mov	r3, r2
 80024ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff f83e 	bl	8001550 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 8217 	bne.w	8002912 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2319      	movs	r3, #25
 80024ea:	2201      	movs	r2, #1
 80024ec:	497c      	ldr	r1, [pc, #496]	@ (80026e0 <HAL_I2C_Master_Receive+0x224>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fc74 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
 80024fc:	e20a      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2C_Master_Receive+0x50>
 8002508:	2302      	movs	r3, #2
 800250a:	e203      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d007      	beq.n	8002532 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2222      	movs	r2, #34	@ 0x22
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2210      	movs	r2, #16
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a5c      	ldr	r2, [pc, #368]	@ (80026e4 <HAL_I2C_Master_Receive+0x228>)
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002574:	8979      	ldrh	r1, [r7, #10]
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 faca 	bl	8002b14 <I2C_MasterRequestRead>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c4      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d113      	bne.n	80025ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e198      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11b      	bne.n	80025fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e178      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11b      	bne.n	800263a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002610:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	e158      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002660:	e144      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	2b03      	cmp	r3, #3
 8002668:	f200 80f1 	bhi.w	800284e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	2b01      	cmp	r3, #1
 8002672:	d123      	bne.n	80026bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fd59 	bl	8003130 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e145      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ba:	e117      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d14e      	bne.n	8002762 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	2200      	movs	r2, #0
 80026cc:	4906      	ldr	r1, [pc, #24]	@ (80026e8 <HAL_I2C_Master_Receive+0x22c>)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb84 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e11a      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000
 80026e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002760:	e0c4      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	2200      	movs	r2, #0
 800276a:	496c      	ldr	r1, [pc, #432]	@ (800291c <HAL_I2C_Master_Receive+0x460>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fb35 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0cb      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c4:	2200      	movs	r2, #0
 80027c6:	4955      	ldr	r1, [pc, #340]	@ (800291c <HAL_I2C_Master_Receive+0x460>)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fb07 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e09d      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800284c:	e04e      	b.n	80028ec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fc6c 	bl	8003130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e058      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d124      	bne.n	80028ec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f aeb6 	bne.w	8002662 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	@ 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010004 	.word	0x00010004

08002920 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	817b      	strh	r3, [r7, #10]
 8002932:	460b      	mov	r3, r1
 8002934:	813b      	strh	r3, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800293a:	f7fe fe09 	bl	8001550 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b20      	cmp	r3, #32
 800294a:	f040 80d9 	bne.w	8002b00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2319      	movs	r3, #25
 8002954:	2201      	movs	r2, #1
 8002956:	496d      	ldr	r1, [pc, #436]	@ (8002b0c <HAL_I2C_Mem_Write+0x1ec>)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa3f 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
 8002966:	e0cc      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Write+0x56>
 8002972:	2302      	movs	r3, #2
 8002974:	e0c5      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d007      	beq.n	800299c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2221      	movs	r2, #33	@ 0x21
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	@ 0x40
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_I2C_Mem_Write+0x1f0>)
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029de:	88f8      	ldrh	r0, [r7, #6]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4603      	mov	r3, r0
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f95e 	bl	8002cb0 <I2C_RequestMemoryWrite>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d052      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e081      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fb04 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1aa      	bne.n	80029fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 faf7 	bl	80030a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ace:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e016      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00100002 	.word	0x00100002
 8002b10:	ffff0000 	.word	0xffff0000

08002b14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d006      	beq.n	8002b4e <I2C_MasterRequestRead+0x3a>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <I2C_MasterRequestRead+0x3a>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b4c:	d108      	bne.n	8002b60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e00b      	b.n	8002b78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	2b11      	cmp	r3, #17
 8002b66:	d107      	bne.n	8002b78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f929 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b9e:	d103      	bne.n	8002ba8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e079      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]
 8002bc6:	e05f      	b.n	8002c88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bc8:	897b      	ldrh	r3, [r7, #10]
 8002bca:	11db      	asrs	r3, r3, #7
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f063 030f 	orn	r3, r3, #15
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4930      	ldr	r1, [pc, #192]	@ (8002ca8 <I2C_MasterRequestRead+0x194>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f972 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e054      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4929      	ldr	r1, [pc, #164]	@ (8002cac <I2C_MasterRequestRead+0x198>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f962 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e044      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f8c7 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c62:	d103      	bne.n	8002c6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e017      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c70:	897b      	ldrh	r3, [r7, #10]
 8002c72:	11db      	asrs	r3, r3, #7
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f003 0306 	and.w	r3, r3, #6
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f063 030e 	orn	r3, r3, #14
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4907      	ldr	r1, [pc, #28]	@ (8002cac <I2C_MasterRequestRead+0x198>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f91e 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010008 	.word	0x00010008
 8002cac:	00010002 	.word	0x00010002

08002cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	813b      	strh	r3, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f878 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d00:	d103      	bne.n	8002d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e05f      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	492d      	ldr	r1, [pc, #180]	@ (8002dd8 <I2C_RequestMemoryWrite+0x128>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f8d3 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e04c      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f95e 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d107      	bne.n	8002d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02b      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	e021      	b.n	8002dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f938 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e005      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00010002 	.word	0x00010002

08002ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	e048      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d044      	beq.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fbab 	bl	8001550 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d139      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10d      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	e00c      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d116      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e023      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	e00c      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d093      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ede:	e071      	b.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d123      	bne.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e067      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d041      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fe fb06 	bl	8001550 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d136      	bne.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e00b      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10c      	bne.n	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e00b      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af6d 	bne.w	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301c:	e034      	b.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8e3 	bl	80031ea <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e034      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d028      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fa8b 	bl	8001550 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11d      	bne.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b80      	cmp	r3, #128	@ 0x80
 8003058:	d016      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d1c3      	bne.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ac:	e034      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f89b 	bl	80031ea <I2C_IsAcknowledgeFailed>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e034      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d028      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fa43 	bl	8001550 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11d      	bne.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d016      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d1c3      	bne.n	80030ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800313c:	e049      	b.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d119      	bne.n	8003180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0210 	mvn.w	r2, #16
 8003154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e030      	b.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7fe f9e6 	bl	8001550 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11d      	bne.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d016      	beq.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d1ae      	bne.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d11b      	bne.n	800323a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800320a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e267      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d075      	beq.n	8003352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	4b88      	ldr	r3, [pc, #544]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d00c      	beq.n	800328c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4b85      	ldr	r3, [pc, #532]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	2b08      	cmp	r3, #8
 800327c:	d112      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327e:	4b82      	ldr	r3, [pc, #520]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800328a:	d10b      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	4b7e      	ldr	r3, [pc, #504]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05b      	beq.n	8003350 <HAL_RCC_OscConfig+0x108>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d157      	bne.n	8003350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e242      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ac:	d106      	bne.n	80032bc <HAL_RCC_OscConfig+0x74>
 80032ae:	4b76      	ldr	r3, [pc, #472]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a75      	ldr	r2, [pc, #468]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x98>
 80032c6:	4b70      	ldr	r3, [pc, #448]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032e0:	4b69      	ldr	r3, [pc, #420]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a68      	ldr	r2, [pc, #416]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b66      	ldr	r3, [pc, #408]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a65      	ldr	r2, [pc, #404]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe f926 	bl	8001550 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe f922 	bl	8001550 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	@ 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e207      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b5b      	ldr	r3, [pc, #364]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xc0>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe f912 	bl	8001550 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe f90e 	bl	8001550 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	@ 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1f3      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b51      	ldr	r3, [pc, #324]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0xe8>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	4b4a      	ldr	r3, [pc, #296]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336a:	4b47      	ldr	r3, [pc, #284]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b44      	ldr	r3, [pc, #272]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1c7      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4937      	ldr	r1, [pc, #220]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b34      	ldr	r3, [pc, #208]	@ (800348c <HAL_RCC_OscConfig+0x244>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe f8c7 	bl	8001550 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe f8c3 	bl	8001550 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1a8      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b28      	ldr	r3, [pc, #160]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4925      	ldr	r1, [pc, #148]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b24      	ldr	r3, [pc, #144]	@ (800348c <HAL_RCC_OscConfig+0x244>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f8a6 	bl	8001550 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe f8a2 	bl	8001550 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e187      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d036      	beq.n	80034a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <HAL_RCC_OscConfig+0x248>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe f886 	bl	8001550 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003448:	f7fe f882 	bl	8001550 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e167      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <HAL_RCC_OscConfig+0x240>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x200>
 8003466:	e01b      	b.n	80034a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_OscConfig+0x248>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe f86f 	bl	8001550 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	e00e      	b.n	8003494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe f86b 	bl	8001550 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d907      	bls.n	8003494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e150      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	42470000 	.word	0x42470000
 8003490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	4b88      	ldr	r3, [pc, #544]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ea      	bne.n	8003476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8097 	beq.w	80035dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b81      	ldr	r3, [pc, #516]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	4b7d      	ldr	r3, [pc, #500]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4a7c      	ldr	r2, [pc, #496]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ce:	4b7a      	ldr	r3, [pc, #488]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b77      	ldr	r3, [pc, #476]	@ (80036bc <HAL_RCC_OscConfig+0x474>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b74      	ldr	r3, [pc, #464]	@ (80036bc <HAL_RCC_OscConfig+0x474>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a73      	ldr	r2, [pc, #460]	@ (80036bc <HAL_RCC_OscConfig+0x474>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fe f82b 	bl	8001550 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fe f827 	bl	8001550 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e10c      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCC_OscConfig+0x474>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x2ea>
 8003524:	4b64      	ldr	r3, [pc, #400]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003528:	4a63      	ldr	r2, [pc, #396]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003530:	e01c      	b.n	800356c <HAL_RCC_OscConfig+0x324>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b05      	cmp	r3, #5
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x30c>
 800353a:	4b5f      	ldr	r3, [pc, #380]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	4a5e      	ldr	r2, [pc, #376]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6713      	str	r3, [r2, #112]	@ 0x70
 8003546:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a5b      	ldr	r2, [pc, #364]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0x324>
 8003554:	4b58      	ldr	r3, [pc, #352]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003558:	4a57      	ldr	r2, [pc, #348]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003560:	4b55      	ldr	r3, [pc, #340]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	4a54      	ldr	r2, [pc, #336]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd ffec 	bl	8001550 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7fd ffe8 	bl	8001550 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0cb      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	4b49      	ldr	r3, [pc, #292]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ee      	beq.n	800357c <HAL_RCC_OscConfig+0x334>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fd ffd6 	bl	8001550 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fd ffd2 	bl	8001550 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0b5      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	4b3e      	ldr	r3, [pc, #248]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d0:	4b39      	ldr	r3, [pc, #228]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a1 	beq.w	8003728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e6:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d05c      	beq.n	80036ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d141      	bne.n	800367e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <HAL_RCC_OscConfig+0x478>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ffa6 	bl	8001550 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd ffa2 	bl	8001550 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e087      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b27      	ldr	r3, [pc, #156]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	491b      	ldr	r1, [pc, #108]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x478>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fd ff7b 	bl	8001550 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fd ff77 	bl	8001550 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e05c      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x416>
 800367c:	e054      	b.n	8003728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_RCC_OscConfig+0x478>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fd ff64 	bl	8001550 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd ff60 	bl	8001550 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e045      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <HAL_RCC_OscConfig+0x470>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x444>
 80036aa:	e03d      	b.n	8003728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e038      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40007000 	.word	0x40007000
 80036c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x4ec>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d028      	beq.n	8003724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d121      	bne.n	8003724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11a      	bne.n	8003724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d111      	bne.n	8003724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d107      	bne.n	8003724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0cc      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b68      	ldr	r3, [pc, #416]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d90c      	bls.n	8003774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b65      	ldr	r3, [pc, #404]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a58      	ldr	r2, [pc, #352]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d044      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d119      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b3f      	ldr	r3, [pc, #252]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3b      	ldr	r3, [pc, #236]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e067      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b37      	ldr	r3, [pc, #220]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4934      	ldr	r1, [pc, #208]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fd fe92 	bl	8001550 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fd fe8e 	bl	8001550 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e04f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d20c      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b22      	ldr	r3, [pc, #136]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038aa:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fdf2 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08005548 	.word	0x08005548
 80038fc:	2000000c 	.word	0x2000000c
 8003900:	20000010 	.word	0x20000010

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b090      	sub	sp, #64	@ 0x40
 800390a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003910:	2300      	movs	r3, #0
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003914:	2300      	movs	r3, #0
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391c:	4b59      	ldr	r3, [pc, #356]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d00d      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x40>
 8003928:	2b08      	cmp	r3, #8
 800392a:	f200 80a1 	bhi.w	8003a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x34>
 8003932:	2b04      	cmp	r3, #4
 8003934:	d003      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x3a>
 8003936:	e09b      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b53      	ldr	r3, [pc, #332]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800393a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800393c:	e09b      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393e:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003940:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003942:	e098      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003944:	4b4f      	ldr	r3, [pc, #316]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800394c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d028      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	2200      	movs	r2, #0
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	627a      	str	r2, [r7, #36]	@ 0x24
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800396c:	2100      	movs	r1, #0
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003970:	fb03 f201 	mul.w	r2, r3, r1
 8003974:	2300      	movs	r3, #0
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	4413      	add	r3, r2
 800397c:	4a43      	ldr	r2, [pc, #268]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800397e:	fba0 1202 	umull	r1, r2, r0, r2
 8003982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003984:	460a      	mov	r2, r1
 8003986:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398a:	4413      	add	r3, r2
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	2200      	movs	r2, #0
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	61fa      	str	r2, [r7, #28]
 8003996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800399a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800399e:	f7fc fc6f 	bl	8000280 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4613      	mov	r3, r2
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039aa:	e053      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ac:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	2200      	movs	r2, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	617a      	str	r2, [r7, #20]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039be:	f04f 0b00 	mov.w	fp, #0
 80039c2:	4652      	mov	r2, sl
 80039c4:	465b      	mov	r3, fp
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d4:	0150      	lsls	r0, r2, #5
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	ebb2 080a 	subs.w	r8, r2, sl
 80039de:	eb63 090b 	sbc.w	r9, r3, fp
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039f6:	ebb2 0408 	subs.w	r4, r2, r8
 80039fa:	eb63 0509 	sbc.w	r5, r3, r9
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	00eb      	lsls	r3, r5, #3
 8003a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0c:	00e2      	lsls	r2, r4, #3
 8003a0e:	4614      	mov	r4, r2
 8003a10:	461d      	mov	r5, r3
 8003a12:	eb14 030a 	adds.w	r3, r4, sl
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	eb45 030b 	adc.w	r3, r5, fp
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	60fa      	str	r2, [r7, #12]
 8003a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a48:	f7fc fc1a 	bl	8000280 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3740      	adds	r7, #64	@ 0x40
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	017d7840 	.word	0x017d7840

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08005558 	.word	0x08005558

08003ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07b      	b.n	8003bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af2:	d009      	beq.n	8003b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	61da      	str	r2, [r3, #28]
 8003afa:	e005      	b.n	8003b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fb38 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	ea42 0103 	orr.w	r1, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0104 	and.w	r1, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	f003 0210 	and.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0db      	b.n	8003dbc <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c12:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003c1a:	7dbb      	ldrb	r3, [r7, #22]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d00d      	beq.n	8003c3c <HAL_SPI_TransmitReceive_DMA+0x58>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c26:	d106      	bne.n	8003c36 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003c30:	7dbb      	ldrb	r3, [r7, #22]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
 8003c38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c3a:	e0ba      	b.n	8003db2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c52:	e0ae      	b.n	8003db2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d003      	beq.n	8003c68 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2205      	movs	r2, #5
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	887a      	ldrh	r2, [r7, #2]
 8003c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d108      	bne.n	8003cbc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	4a45      	ldr	r2, [pc, #276]	@ (8003dc4 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb6:	4a44      	ldr	r2, [pc, #272]	@ (8003dc8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8003cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cba:	e007      	b.n	8003ccc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	4a42      	ldr	r2, [pc, #264]	@ (8003dcc <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc8:	4a41      	ldr	r2, [pc, #260]	@ (8003dd0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd0:	4a40      	ldr	r2, [pc, #256]	@ (8003dd4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003cd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cf4:	f7fd fe1c 	bl	8001930 <HAL_DMA_Start_IT>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003d0e:	e050      	b.n	8003db2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d34:	2200      	movs	r2, #0
 8003d36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d58:	f7fd fdea 	bl	8001930 <HAL_DMA_Start_IT>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003d72:	e01e      	b.n	8003db2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d007      	beq.n	8003d92 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d90:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0220 	orr.w	r2, r2, #32
 8003da0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0202 	orr.w	r2, r2, #2
 8003db0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	0800415d 	.word	0x0800415d
 8003dc8:	08004025 	.word	0x08004025
 8003dcc:	08004179 	.word	0x08004179
 8003dd0:	080040cd 	.word	0x080040cd
 8003dd4:	08004195 	.word	0x08004195

08003dd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10e      	bne.n	8003e18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
    return;
 8003e16:	e0ce      	b.n	8003fb6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_SPI_IRQHandler+0x5e>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
    return;
 8003e34:	e0bf      	b.n	8003fb6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_SPI_IRQHandler+0x7e>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80b0 	beq.w	8003fb6 <HAL_SPI_IRQHandler+0x1de>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80aa 	beq.w	8003fb6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d011      	beq.n	8003e9c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]
        return;
 8003eb2:	e080      	b.n	8003fb6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	f043 0208 	orr.w	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d04f      	beq.n	8003fb4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f22:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <HAL_SPI_IRQHandler+0x168>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d034      	beq.n	8003faa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0203 	bic.w	r2, r2, #3
 8003f4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5c:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <HAL_SPI_IRQHandler+0x1e4>)
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd fd3b 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d016      	beq.n	8003fb2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f88:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <HAL_SPI_IRQHandler+0x1e4>)
 8003f8a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fd fd25 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003fa8:	e003      	b.n	8003fb2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f830 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003fb0:	e000      	b.n	8003fb4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003fb2:	bf00      	nop
    return;
 8003fb4:	bf00      	nop
  }
}
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	080041d5 	.word	0x080041d5

08003fc0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004032:	f7fd fa8d 	bl	8001550 <HAL_GetTick>
 8004036:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004046:	d03b      	beq.n	80040c0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0220 	bic.w	r2, r2, #32
 8004056:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <SPI_DMAReceiveCplt+0x58>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004068:	d108      	bne.n	800407c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0203 	bic.w	r2, r2, #3
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	2164      	movs	r1, #100	@ 0x64
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f93b 	bl	800430c <SPI_EndRxTransaction>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ffa9 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040be:	e002      	b.n	80040c6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff7d 	bl	8003fc0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040da:	f7fd fa39 	bl	8001550 <HAL_GetTick>
 80040de:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ee:	d02f      	beq.n	8004150 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0220 	bic.w	r2, r2, #32
 80040fe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	2164      	movs	r1, #100	@ 0x64
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f967 	bl	80043d8 <SPI_EndRxTxTransaction>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0203 	bic.w	r2, r2, #3
 800412a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ff61 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800414e:	e002      	b.n	8004156 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff3f 	bl	8003fd4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff3c 	bl	8003fe8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ff38 	bl	8003ffc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0203 	bic.w	r2, r2, #3
 80041b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0210 	orr.w	r2, r3, #16
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff ff22 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff0e 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800420c:	f7fd f9a0 	bl	8001550 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	4413      	add	r3, r2
 800421a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800421c:	f7fd f998 	bl	8001550 <HAL_GetTick>
 8004220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004222:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	015b      	lsls	r3, r3, #5
 8004228:	0d1b      	lsrs	r3, r3, #20
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	e054      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d050      	beq.n	80042de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800423c:	f7fd f988 	bl	8001550 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	429a      	cmp	r2, r3
 800424a:	d902      	bls.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d13d      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800426a:	d111      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	d004      	beq.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427e:	d107      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004298:	d10f      	bne.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e017      	b.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3b01      	subs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d19b      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000000c 	.word	0x2000000c

0800430c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004320:	d111      	bne.n	8004346 <SPI_EndRxTransaction+0x3a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432a:	d004      	beq.n	8004336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004334:	d107      	bne.n	8004346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800434e:	d12a      	bne.n	80043a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004358:	d012      	beq.n	8004380 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	@ 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ff49 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02d      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e026      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	2101      	movs	r1, #1
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff36 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e013      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2101      	movs	r1, #1
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff ff23 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e000      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2201      	movs	r2, #1
 80043ec:	2102      	movs	r1, #2
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff04 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e032      	b.n	8004470 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <SPI_EndRxTxTransaction+0xa0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <SPI_EndRxTxTransaction+0xa4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	0d5b      	lsrs	r3, r3, #21
 8004416:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004428:	d112      	bne.n	8004450 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	@ 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fee1 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d016      	beq.n	800446e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e00f      	b.n	8004470 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3b01      	subs	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b80      	cmp	r3, #128	@ 0x80
 8004468:	d0f2      	beq.n	8004450 <SPI_EndRxTxTransaction+0x78>
 800446a:	e000      	b.n	800446e <SPI_EndRxTxTransaction+0x96>
        break;
 800446c:	bf00      	nop
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000000c 	.word	0x2000000c
 800447c:	165e9f81 	.word	0x165e9f81

08004480 <siprintf>:
 8004480:	b40e      	push	{r1, r2, r3}
 8004482:	b500      	push	{lr}
 8004484:	b09c      	sub	sp, #112	@ 0x70
 8004486:	ab1d      	add	r3, sp, #116	@ 0x74
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	9006      	str	r0, [sp, #24]
 800448c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004490:	4809      	ldr	r0, [pc, #36]	@ (80044b8 <siprintf+0x38>)
 8004492:	9107      	str	r1, [sp, #28]
 8004494:	9104      	str	r1, [sp, #16]
 8004496:	4909      	ldr	r1, [pc, #36]	@ (80044bc <siprintf+0x3c>)
 8004498:	f853 2b04 	ldr.w	r2, [r3], #4
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	6800      	ldr	r0, [r0, #0]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	a902      	add	r1, sp, #8
 80044a4:	f000 f9bc 	bl	8004820 <_svfiprintf_r>
 80044a8:	9b02      	ldr	r3, [sp, #8]
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	b01c      	add	sp, #112	@ 0x70
 80044b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b4:	b003      	add	sp, #12
 80044b6:	4770      	bx	lr
 80044b8:	20000018 	.word	0x20000018
 80044bc:	ffff0208 	.word	0xffff0208

080044c0 <memmove>:
 80044c0:	4288      	cmp	r0, r1
 80044c2:	b510      	push	{r4, lr}
 80044c4:	eb01 0402 	add.w	r4, r1, r2
 80044c8:	d902      	bls.n	80044d0 <memmove+0x10>
 80044ca:	4284      	cmp	r4, r0
 80044cc:	4623      	mov	r3, r4
 80044ce:	d807      	bhi.n	80044e0 <memmove+0x20>
 80044d0:	1e43      	subs	r3, r0, #1
 80044d2:	42a1      	cmp	r1, r4
 80044d4:	d008      	beq.n	80044e8 <memmove+0x28>
 80044d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044de:	e7f8      	b.n	80044d2 <memmove+0x12>
 80044e0:	4402      	add	r2, r0
 80044e2:	4601      	mov	r1, r0
 80044e4:	428a      	cmp	r2, r1
 80044e6:	d100      	bne.n	80044ea <memmove+0x2a>
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044f2:	e7f7      	b.n	80044e4 <memmove+0x24>

080044f4 <memset>:
 80044f4:	4402      	add	r2, r0
 80044f6:	4603      	mov	r3, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <__errno>:
 8004504:	4b01      	ldr	r3, [pc, #4]	@ (800450c <__errno+0x8>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000018 	.word	0x20000018

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4d0d      	ldr	r5, [pc, #52]	@ (8004548 <__libc_init_array+0x38>)
 8004514:	4c0d      	ldr	r4, [pc, #52]	@ (800454c <__libc_init_array+0x3c>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	2600      	movs	r6, #0
 800451c:	42a6      	cmp	r6, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	4d0b      	ldr	r5, [pc, #44]	@ (8004550 <__libc_init_array+0x40>)
 8004522:	4c0c      	ldr	r4, [pc, #48]	@ (8004554 <__libc_init_array+0x44>)
 8004524:	f000 fc4c 	bl	8004dc0 <_init>
 8004528:	1b64      	subs	r4, r4, r5
 800452a:	10a4      	asrs	r4, r4, #2
 800452c:	2600      	movs	r6, #0
 800452e:	42a6      	cmp	r6, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	f855 3b04 	ldr.w	r3, [r5], #4
 8004538:	4798      	blx	r3
 800453a:	3601      	adds	r6, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004542:	4798      	blx	r3
 8004544:	3601      	adds	r6, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	080055a4 	.word	0x080055a4
 800454c:	080055a4 	.word	0x080055a4
 8004550:	080055a4 	.word	0x080055a4
 8004554:	080055a8 	.word	0x080055a8

08004558 <__retarget_lock_acquire_recursive>:
 8004558:	4770      	bx	lr

0800455a <__retarget_lock_release_recursive>:
 800455a:	4770      	bx	lr

0800455c <memcpy>:
 800455c:	440a      	add	r2, r1
 800455e:	4291      	cmp	r1, r2
 8004560:	f100 33ff 	add.w	r3, r0, #4294967295
 8004564:	d100      	bne.n	8004568 <memcpy+0xc>
 8004566:	4770      	bx	lr
 8004568:	b510      	push	{r4, lr}
 800456a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004572:	4291      	cmp	r1, r2
 8004574:	d1f9      	bne.n	800456a <memcpy+0xe>
 8004576:	bd10      	pop	{r4, pc}

08004578 <_free_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	2900      	cmp	r1, #0
 800457e:	d041      	beq.n	8004604 <_free_r+0x8c>
 8004580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004584:	1f0c      	subs	r4, r1, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfb8      	it	lt
 800458a:	18e4      	addlt	r4, r4, r3
 800458c:	f000 f8e0 	bl	8004750 <__malloc_lock>
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <_free_r+0x90>)
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	b933      	cbnz	r3, 80045a4 <_free_r+0x2c>
 8004596:	6063      	str	r3, [r4, #4]
 8004598:	6014      	str	r4, [r2, #0]
 800459a:	4628      	mov	r0, r5
 800459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045a0:	f000 b8dc 	b.w	800475c <__malloc_unlock>
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d908      	bls.n	80045ba <_free_r+0x42>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	1821      	adds	r1, r4, r0
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf01      	itttt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	1809      	addeq	r1, r1, r0
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	e7ed      	b.n	8004596 <_free_r+0x1e>
 80045ba:	461a      	mov	r2, r3
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b10b      	cbz	r3, 80045c4 <_free_r+0x4c>
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d9fa      	bls.n	80045ba <_free_r+0x42>
 80045c4:	6811      	ldr	r1, [r2, #0]
 80045c6:	1850      	adds	r0, r2, r1
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d10b      	bne.n	80045e4 <_free_r+0x6c>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	4401      	add	r1, r0
 80045d0:	1850      	adds	r0, r2, r1
 80045d2:	4283      	cmp	r3, r0
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	d1e0      	bne.n	800459a <_free_r+0x22>
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6053      	str	r3, [r2, #4]
 80045de:	4408      	add	r0, r1
 80045e0:	6010      	str	r0, [r2, #0]
 80045e2:	e7da      	b.n	800459a <_free_r+0x22>
 80045e4:	d902      	bls.n	80045ec <_free_r+0x74>
 80045e6:	230c      	movs	r3, #12
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	e7d6      	b.n	800459a <_free_r+0x22>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	1821      	adds	r1, r4, r0
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf04      	itt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	bf04      	itt	eq
 80045fc:	1809      	addeq	r1, r1, r0
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	6054      	str	r4, [r2, #4]
 8004602:	e7ca      	b.n	800459a <_free_r+0x22>
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	200007c0 	.word	0x200007c0

0800460c <sbrk_aligned>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4e0f      	ldr	r6, [pc, #60]	@ (800464c <sbrk_aligned+0x40>)
 8004610:	460c      	mov	r4, r1
 8004612:	6831      	ldr	r1, [r6, #0]
 8004614:	4605      	mov	r5, r0
 8004616:	b911      	cbnz	r1, 800461e <sbrk_aligned+0x12>
 8004618:	f000 fb8c 	bl	8004d34 <_sbrk_r>
 800461c:	6030      	str	r0, [r6, #0]
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 fb87 	bl	8004d34 <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d103      	bne.n	8004632 <sbrk_aligned+0x26>
 800462a:	f04f 34ff 	mov.w	r4, #4294967295
 800462e:	4620      	mov	r0, r4
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	1cc4      	adds	r4, r0, #3
 8004634:	f024 0403 	bic.w	r4, r4, #3
 8004638:	42a0      	cmp	r0, r4
 800463a:	d0f8      	beq.n	800462e <sbrk_aligned+0x22>
 800463c:	1a21      	subs	r1, r4, r0
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fb78 	bl	8004d34 <_sbrk_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d1f2      	bne.n	800462e <sbrk_aligned+0x22>
 8004648:	e7ef      	b.n	800462a <sbrk_aligned+0x1e>
 800464a:	bf00      	nop
 800464c:	200007bc 	.word	0x200007bc

08004650 <_malloc_r>:
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004654:	1ccd      	adds	r5, r1, #3
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	2d00      	cmp	r5, #0
 8004664:	4606      	mov	r6, r0
 8004666:	db01      	blt.n	800466c <_malloc_r+0x1c>
 8004668:	42a9      	cmp	r1, r5
 800466a:	d904      	bls.n	8004676 <_malloc_r+0x26>
 800466c:	230c      	movs	r3, #12
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	2000      	movs	r0, #0
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800474c <_malloc_r+0xfc>
 800467a:	f000 f869 	bl	8004750 <__malloc_lock>
 800467e:	f8d8 3000 	ldr.w	r3, [r8]
 8004682:	461c      	mov	r4, r3
 8004684:	bb44      	cbnz	r4, 80046d8 <_malloc_r+0x88>
 8004686:	4629      	mov	r1, r5
 8004688:	4630      	mov	r0, r6
 800468a:	f7ff ffbf 	bl	800460c <sbrk_aligned>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	4604      	mov	r4, r0
 8004692:	d158      	bne.n	8004746 <_malloc_r+0xf6>
 8004694:	f8d8 4000 	ldr.w	r4, [r8]
 8004698:	4627      	mov	r7, r4
 800469a:	2f00      	cmp	r7, #0
 800469c:	d143      	bne.n	8004726 <_malloc_r+0xd6>
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d04b      	beq.n	800473a <_malloc_r+0xea>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4639      	mov	r1, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	eb04 0903 	add.w	r9, r4, r3
 80046ac:	f000 fb42 	bl	8004d34 <_sbrk_r>
 80046b0:	4581      	cmp	r9, r0
 80046b2:	d142      	bne.n	800473a <_malloc_r+0xea>
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	1a6d      	subs	r5, r5, r1
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffa6 	bl	800460c <sbrk_aligned>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d03a      	beq.n	800473a <_malloc_r+0xea>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	442b      	add	r3, r5
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	f8d8 3000 	ldr.w	r3, [r8]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	bb62      	cbnz	r2, 800472c <_malloc_r+0xdc>
 80046d2:	f8c8 7000 	str.w	r7, [r8]
 80046d6:	e00f      	b.n	80046f8 <_malloc_r+0xa8>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	1b52      	subs	r2, r2, r5
 80046dc:	d420      	bmi.n	8004720 <_malloc_r+0xd0>
 80046de:	2a0b      	cmp	r2, #11
 80046e0:	d917      	bls.n	8004712 <_malloc_r+0xc2>
 80046e2:	1961      	adds	r1, r4, r5
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	bf18      	it	ne
 80046ea:	6059      	strne	r1, [r3, #4]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	bf08      	it	eq
 80046f0:	f8c8 1000 	streq.w	r1, [r8]
 80046f4:	5162      	str	r2, [r4, r5]
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 f82f 	bl	800475c <__malloc_unlock>
 80046fe:	f104 000b 	add.w	r0, r4, #11
 8004702:	1d23      	adds	r3, r4, #4
 8004704:	f020 0007 	bic.w	r0, r0, #7
 8004708:	1ac2      	subs	r2, r0, r3
 800470a:	bf1c      	itt	ne
 800470c:	1a1b      	subne	r3, r3, r0
 800470e:	50a3      	strne	r3, [r4, r2]
 8004710:	e7af      	b.n	8004672 <_malloc_r+0x22>
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	42a3      	cmp	r3, r4
 8004716:	bf0c      	ite	eq
 8004718:	f8c8 2000 	streq.w	r2, [r8]
 800471c:	605a      	strne	r2, [r3, #4]
 800471e:	e7eb      	b.n	80046f8 <_malloc_r+0xa8>
 8004720:	4623      	mov	r3, r4
 8004722:	6864      	ldr	r4, [r4, #4]
 8004724:	e7ae      	b.n	8004684 <_malloc_r+0x34>
 8004726:	463c      	mov	r4, r7
 8004728:	687f      	ldr	r7, [r7, #4]
 800472a:	e7b6      	b.n	800469a <_malloc_r+0x4a>
 800472c:	461a      	mov	r2, r3
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	42a3      	cmp	r3, r4
 8004732:	d1fb      	bne.n	800472c <_malloc_r+0xdc>
 8004734:	2300      	movs	r3, #0
 8004736:	6053      	str	r3, [r2, #4]
 8004738:	e7de      	b.n	80046f8 <_malloc_r+0xa8>
 800473a:	230c      	movs	r3, #12
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f80c 	bl	800475c <__malloc_unlock>
 8004744:	e794      	b.n	8004670 <_malloc_r+0x20>
 8004746:	6005      	str	r5, [r0, #0]
 8004748:	e7d6      	b.n	80046f8 <_malloc_r+0xa8>
 800474a:	bf00      	nop
 800474c:	200007c0 	.word	0x200007c0

08004750 <__malloc_lock>:
 8004750:	4801      	ldr	r0, [pc, #4]	@ (8004758 <__malloc_lock+0x8>)
 8004752:	f7ff bf01 	b.w	8004558 <__retarget_lock_acquire_recursive>
 8004756:	bf00      	nop
 8004758:	200007b8 	.word	0x200007b8

0800475c <__malloc_unlock>:
 800475c:	4801      	ldr	r0, [pc, #4]	@ (8004764 <__malloc_unlock+0x8>)
 800475e:	f7ff befc 	b.w	800455a <__retarget_lock_release_recursive>
 8004762:	bf00      	nop
 8004764:	200007b8 	.word	0x200007b8

08004768 <__ssputs_r>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	688e      	ldr	r6, [r1, #8]
 800476e:	461f      	mov	r7, r3
 8004770:	42be      	cmp	r6, r7
 8004772:	680b      	ldr	r3, [r1, #0]
 8004774:	4682      	mov	sl, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4690      	mov	r8, r2
 800477a:	d82d      	bhi.n	80047d8 <__ssputs_r+0x70>
 800477c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004784:	d026      	beq.n	80047d4 <__ssputs_r+0x6c>
 8004786:	6965      	ldr	r5, [r4, #20]
 8004788:	6909      	ldr	r1, [r1, #16]
 800478a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478e:	eba3 0901 	sub.w	r9, r3, r1
 8004792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004796:	1c7b      	adds	r3, r7, #1
 8004798:	444b      	add	r3, r9
 800479a:	106d      	asrs	r5, r5, #1
 800479c:	429d      	cmp	r5, r3
 800479e:	bf38      	it	cc
 80047a0:	461d      	movcc	r5, r3
 80047a2:	0553      	lsls	r3, r2, #21
 80047a4:	d527      	bpl.n	80047f6 <__ssputs_r+0x8e>
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7ff ff52 	bl	8004650 <_malloc_r>
 80047ac:	4606      	mov	r6, r0
 80047ae:	b360      	cbz	r0, 800480a <__ssputs_r+0xa2>
 80047b0:	6921      	ldr	r1, [r4, #16]
 80047b2:	464a      	mov	r2, r9
 80047b4:	f7ff fed2 	bl	800455c <memcpy>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	6126      	str	r6, [r4, #16]
 80047c6:	6165      	str	r5, [r4, #20]
 80047c8:	444e      	add	r6, r9
 80047ca:	eba5 0509 	sub.w	r5, r5, r9
 80047ce:	6026      	str	r6, [r4, #0]
 80047d0:	60a5      	str	r5, [r4, #8]
 80047d2:	463e      	mov	r6, r7
 80047d4:	42be      	cmp	r6, r7
 80047d6:	d900      	bls.n	80047da <__ssputs_r+0x72>
 80047d8:	463e      	mov	r6, r7
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	4632      	mov	r2, r6
 80047de:	4641      	mov	r1, r8
 80047e0:	f7ff fe6e 	bl	80044c0 <memmove>
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	1b9b      	subs	r3, r3, r6
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4433      	add	r3, r6
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	2000      	movs	r0, #0
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	462a      	mov	r2, r5
 80047f8:	f000 faac 	bl	8004d54 <_realloc_r>
 80047fc:	4606      	mov	r6, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d1e0      	bne.n	80047c4 <__ssputs_r+0x5c>
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	4650      	mov	r0, sl
 8004806:	f7ff feb7 	bl	8004578 <_free_r>
 800480a:	230c      	movs	r3, #12
 800480c:	f8ca 3000 	str.w	r3, [sl]
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e7e9      	b.n	80047f2 <__ssputs_r+0x8a>
	...

08004820 <_svfiprintf_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	4698      	mov	r8, r3
 8004826:	898b      	ldrh	r3, [r1, #12]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	b09d      	sub	sp, #116	@ 0x74
 800482c:	4607      	mov	r7, r0
 800482e:	460d      	mov	r5, r1
 8004830:	4614      	mov	r4, r2
 8004832:	d510      	bpl.n	8004856 <_svfiprintf_r+0x36>
 8004834:	690b      	ldr	r3, [r1, #16]
 8004836:	b973      	cbnz	r3, 8004856 <_svfiprintf_r+0x36>
 8004838:	2140      	movs	r1, #64	@ 0x40
 800483a:	f7ff ff09 	bl	8004650 <_malloc_r>
 800483e:	6028      	str	r0, [r5, #0]
 8004840:	6128      	str	r0, [r5, #16]
 8004842:	b930      	cbnz	r0, 8004852 <_svfiprintf_r+0x32>
 8004844:	230c      	movs	r3, #12
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	b01d      	add	sp, #116	@ 0x74
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004852:	2340      	movs	r3, #64	@ 0x40
 8004854:	616b      	str	r3, [r5, #20]
 8004856:	2300      	movs	r3, #0
 8004858:	9309      	str	r3, [sp, #36]	@ 0x24
 800485a:	2320      	movs	r3, #32
 800485c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004860:	f8cd 800c 	str.w	r8, [sp, #12]
 8004864:	2330      	movs	r3, #48	@ 0x30
 8004866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a04 <_svfiprintf_r+0x1e4>
 800486a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800486e:	f04f 0901 	mov.w	r9, #1
 8004872:	4623      	mov	r3, r4
 8004874:	469a      	mov	sl, r3
 8004876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800487a:	b10a      	cbz	r2, 8004880 <_svfiprintf_r+0x60>
 800487c:	2a25      	cmp	r2, #37	@ 0x25
 800487e:	d1f9      	bne.n	8004874 <_svfiprintf_r+0x54>
 8004880:	ebba 0b04 	subs.w	fp, sl, r4
 8004884:	d00b      	beq.n	800489e <_svfiprintf_r+0x7e>
 8004886:	465b      	mov	r3, fp
 8004888:	4622      	mov	r2, r4
 800488a:	4629      	mov	r1, r5
 800488c:	4638      	mov	r0, r7
 800488e:	f7ff ff6b 	bl	8004768 <__ssputs_r>
 8004892:	3001      	adds	r0, #1
 8004894:	f000 80a7 	beq.w	80049e6 <_svfiprintf_r+0x1c6>
 8004898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800489a:	445a      	add	r2, fp
 800489c:	9209      	str	r2, [sp, #36]	@ 0x24
 800489e:	f89a 3000 	ldrb.w	r3, [sl]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 809f 	beq.w	80049e6 <_svfiprintf_r+0x1c6>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f04f 32ff 	mov.w	r2, #4294967295
 80048ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b2:	f10a 0a01 	add.w	sl, sl, #1
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048be:	931a      	str	r3, [sp, #104]	@ 0x68
 80048c0:	4654      	mov	r4, sl
 80048c2:	2205      	movs	r2, #5
 80048c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c8:	484e      	ldr	r0, [pc, #312]	@ (8004a04 <_svfiprintf_r+0x1e4>)
 80048ca:	f7fb fc89 	bl	80001e0 <memchr>
 80048ce:	9a04      	ldr	r2, [sp, #16]
 80048d0:	b9d8      	cbnz	r0, 800490a <_svfiprintf_r+0xea>
 80048d2:	06d0      	lsls	r0, r2, #27
 80048d4:	bf44      	itt	mi
 80048d6:	2320      	movmi	r3, #32
 80048d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048dc:	0711      	lsls	r1, r2, #28
 80048de:	bf44      	itt	mi
 80048e0:	232b      	movmi	r3, #43	@ 0x2b
 80048e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048e6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ec:	d015      	beq.n	800491a <_svfiprintf_r+0xfa>
 80048ee:	9a07      	ldr	r2, [sp, #28]
 80048f0:	4654      	mov	r4, sl
 80048f2:	2000      	movs	r0, #0
 80048f4:	f04f 0c0a 	mov.w	ip, #10
 80048f8:	4621      	mov	r1, r4
 80048fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048fe:	3b30      	subs	r3, #48	@ 0x30
 8004900:	2b09      	cmp	r3, #9
 8004902:	d94b      	bls.n	800499c <_svfiprintf_r+0x17c>
 8004904:	b1b0      	cbz	r0, 8004934 <_svfiprintf_r+0x114>
 8004906:	9207      	str	r2, [sp, #28]
 8004908:	e014      	b.n	8004934 <_svfiprintf_r+0x114>
 800490a:	eba0 0308 	sub.w	r3, r0, r8
 800490e:	fa09 f303 	lsl.w	r3, r9, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	9304      	str	r3, [sp, #16]
 8004916:	46a2      	mov	sl, r4
 8004918:	e7d2      	b.n	80048c0 <_svfiprintf_r+0xa0>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	9103      	str	r1, [sp, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	bfbb      	ittet	lt
 8004926:	425b      	neglt	r3, r3
 8004928:	f042 0202 	orrlt.w	r2, r2, #2
 800492c:	9307      	strge	r3, [sp, #28]
 800492e:	9307      	strlt	r3, [sp, #28]
 8004930:	bfb8      	it	lt
 8004932:	9204      	strlt	r2, [sp, #16]
 8004934:	7823      	ldrb	r3, [r4, #0]
 8004936:	2b2e      	cmp	r3, #46	@ 0x2e
 8004938:	d10a      	bne.n	8004950 <_svfiprintf_r+0x130>
 800493a:	7863      	ldrb	r3, [r4, #1]
 800493c:	2b2a      	cmp	r3, #42	@ 0x2a
 800493e:	d132      	bne.n	80049a6 <_svfiprintf_r+0x186>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800494c:	3402      	adds	r4, #2
 800494e:	9305      	str	r3, [sp, #20]
 8004950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a14 <_svfiprintf_r+0x1f4>
 8004954:	7821      	ldrb	r1, [r4, #0]
 8004956:	2203      	movs	r2, #3
 8004958:	4650      	mov	r0, sl
 800495a:	f7fb fc41 	bl	80001e0 <memchr>
 800495e:	b138      	cbz	r0, 8004970 <_svfiprintf_r+0x150>
 8004960:	9b04      	ldr	r3, [sp, #16]
 8004962:	eba0 000a 	sub.w	r0, r0, sl
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	4082      	lsls	r2, r0
 800496a:	4313      	orrs	r3, r2
 800496c:	3401      	adds	r4, #1
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004974:	4824      	ldr	r0, [pc, #144]	@ (8004a08 <_svfiprintf_r+0x1e8>)
 8004976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800497a:	2206      	movs	r2, #6
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	2800      	cmp	r0, #0
 8004982:	d036      	beq.n	80049f2 <_svfiprintf_r+0x1d2>
 8004984:	4b21      	ldr	r3, [pc, #132]	@ (8004a0c <_svfiprintf_r+0x1ec>)
 8004986:	bb1b      	cbnz	r3, 80049d0 <_svfiprintf_r+0x1b0>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	3307      	adds	r3, #7
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004996:	4433      	add	r3, r6
 8004998:	9309      	str	r3, [sp, #36]	@ 0x24
 800499a:	e76a      	b.n	8004872 <_svfiprintf_r+0x52>
 800499c:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a0:	460c      	mov	r4, r1
 80049a2:	2001      	movs	r0, #1
 80049a4:	e7a8      	b.n	80048f8 <_svfiprintf_r+0xd8>
 80049a6:	2300      	movs	r3, #0
 80049a8:	3401      	adds	r4, #1
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f04f 0c0a 	mov.w	ip, #10
 80049b2:	4620      	mov	r0, r4
 80049b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b8:	3a30      	subs	r2, #48	@ 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d903      	bls.n	80049c6 <_svfiprintf_r+0x1a6>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0c6      	beq.n	8004950 <_svfiprintf_r+0x130>
 80049c2:	9105      	str	r1, [sp, #20]
 80049c4:	e7c4      	b.n	8004950 <_svfiprintf_r+0x130>
 80049c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ca:	4604      	mov	r4, r0
 80049cc:	2301      	movs	r3, #1
 80049ce:	e7f0      	b.n	80049b2 <_svfiprintf_r+0x192>
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <_svfiprintf_r+0x1f0>)
 80049d8:	a904      	add	r1, sp, #16
 80049da:	4638      	mov	r0, r7
 80049dc:	f3af 8000 	nop.w
 80049e0:	1c42      	adds	r2, r0, #1
 80049e2:	4606      	mov	r6, r0
 80049e4:	d1d6      	bne.n	8004994 <_svfiprintf_r+0x174>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	065b      	lsls	r3, r3, #25
 80049ea:	f53f af2d 	bmi.w	8004848 <_svfiprintf_r+0x28>
 80049ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049f0:	e72c      	b.n	800484c <_svfiprintf_r+0x2c>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <_svfiprintf_r+0x1f0>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4638      	mov	r0, r7
 80049fe:	f000 f879 	bl	8004af4 <_printf_i>
 8004a02:	e7ed      	b.n	80049e0 <_svfiprintf_r+0x1c0>
 8004a04:	08005568 	.word	0x08005568
 8004a08:	08005572 	.word	0x08005572
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	08004769 	.word	0x08004769
 8004a14:	0800556e 	.word	0x0800556e

08004a18 <_printf_common>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	690b      	ldr	r3, [r1, #16]
 8004a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfb8      	it	lt
 8004a2c:	4613      	movlt	r3, r2
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a34:	4607      	mov	r7, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b10a      	cbz	r2, 8004a3e <_printf_common+0x26>
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	6833      	ldrmi	r3, [r6, #0]
 8004a46:	3302      	addmi	r3, #2
 8004a48:	6033      	strmi	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d106      	bne.n	8004a60 <_printf_common+0x48>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	6832      	ldr	r2, [r6, #0]
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dc26      	bgt.n	8004aae <_printf_common+0x96>
 8004a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	3b00      	subs	r3, #0
 8004a68:	bf18      	it	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	0692      	lsls	r2, r2, #26
 8004a6e:	d42b      	bmi.n	8004ac8 <_printf_common+0xb0>
 8004a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a74:	4641      	mov	r1, r8
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c8      	blx	r9
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d01e      	beq.n	8004abc <_printf_common+0xa4>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf02      	ittt	eq
 8004a8a:	68e5      	ldreq	r5, [r4, #12]
 8004a8c:	6833      	ldreq	r3, [r6, #0]
 8004a8e:	1aed      	subeq	r5, r5, r3
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	bf0c      	ite	eq
 8004a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a98:	2500      	movne	r5, #0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bfc4      	itt	gt
 8004a9e:	1a9b      	subgt	r3, r3, r2
 8004aa0:	18ed      	addgt	r5, r5, r3
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xc8>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xa8>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	47c8      	blx	r9
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xac>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c6      	b.n	8004a56 <_printf_common+0x3e>
 8004ac8:	18e1      	adds	r1, r4, r3
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	2030      	movs	r0, #48	@ 0x30
 8004ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ad2:	4422      	add	r2, r4
 8004ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004adc:	3302      	adds	r3, #2
 8004ade:	e7c7      	b.n	8004a70 <_printf_common+0x58>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c8      	blx	r9
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa4>
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7d9      	b.n	8004aa6 <_printf_common+0x8e>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	7e0f      	ldrb	r7, [r1, #24]
 8004afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004afc:	2f78      	cmp	r7, #120	@ 0x78
 8004afe:	4691      	mov	r9, r2
 8004b00:	4680      	mov	r8, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	469a      	mov	sl, r3
 8004b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b0a:	d807      	bhi.n	8004b1c <_printf_i+0x28>
 8004b0c:	2f62      	cmp	r7, #98	@ 0x62
 8004b0e:	d80a      	bhi.n	8004b26 <_printf_i+0x32>
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	f000 80d2 	beq.w	8004cba <_printf_i+0x1c6>
 8004b16:	2f58      	cmp	r7, #88	@ 0x58
 8004b18:	f000 80b9 	beq.w	8004c8e <_printf_i+0x19a>
 8004b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b24:	e03a      	b.n	8004b9c <_printf_i+0xa8>
 8004b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b2a:	2b15      	cmp	r3, #21
 8004b2c:	d8f6      	bhi.n	8004b1c <_printf_i+0x28>
 8004b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b34 <_printf_i+0x40>)
 8004b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004b1d 	.word	0x08004b1d
 8004b40:	08004b1d 	.word	0x08004b1d
 8004b44:	08004b1d 	.word	0x08004b1d
 8004b48:	08004b1d 	.word	0x08004b1d
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004b1d 	.word	0x08004b1d
 8004b54:	08004b1d 	.word	0x08004b1d
 8004b58:	08004b1d 	.word	0x08004b1d
 8004b5c:	08004b1d 	.word	0x08004b1d
 8004b60:	08004ca1 	.word	0x08004ca1
 8004b64:	08004bcb 	.word	0x08004bcb
 8004b68:	08004c5b 	.word	0x08004c5b
 8004b6c:	08004b1d 	.word	0x08004b1d
 8004b70:	08004b1d 	.word	0x08004b1d
 8004b74:	08004cc3 	.word	0x08004cc3
 8004b78:	08004b1d 	.word	0x08004b1d
 8004b7c:	08004bcb 	.word	0x08004bcb
 8004b80:	08004b1d 	.word	0x08004b1d
 8004b84:	08004b1d 	.word	0x08004b1d
 8004b88:	08004c63 	.word	0x08004c63
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6032      	str	r2, [r6, #0]
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09d      	b.n	8004cdc <_printf_i+0x1e8>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6031      	str	r1, [r6, #0]
 8004ba8:	0606      	lsls	r6, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xbc>
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <_printf_i+0xc4>
 8004bb0:	0645      	lsls	r5, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xb8>
 8004bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	da03      	bge.n	8004bc4 <_printf_i+0xd0>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	426d      	negs	r5, r5
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	4859      	ldr	r0, [pc, #356]	@ (8004d2c <_printf_i+0x238>)
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e011      	b.n	8004bee <_printf_i+0xfa>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	0608      	lsls	r0, r1, #24
 8004bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0xe8>
 8004bd6:	0649      	lsls	r1, r1, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2ad      	uxthmi	r5, r5
 8004bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bde:	4853      	ldr	r0, [pc, #332]	@ (8004d2c <_printf_i+0x238>)
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	bf14      	ite	ne
 8004be4:	230a      	movne	r3, #10
 8004be6:	2308      	moveq	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bee:	6866      	ldr	r6, [r4, #4]
 8004bf0:	60a6      	str	r6, [r4, #8]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	bfa2      	ittt	ge
 8004bf6:	6821      	ldrge	r1, [r4, #0]
 8004bf8:	f021 0104 	bicge.w	r1, r1, #4
 8004bfc:	6021      	strge	r1, [r4, #0]
 8004bfe:	b90d      	cbnz	r5, 8004c04 <_printf_i+0x110>
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	d04b      	beq.n	8004c9c <_printf_i+0x1a8>
 8004c04:	4616      	mov	r6, r2
 8004c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c0e:	5dc7      	ldrb	r7, [r0, r7]
 8004c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c14:	462f      	mov	r7, r5
 8004c16:	42bb      	cmp	r3, r7
 8004c18:	460d      	mov	r5, r1
 8004c1a:	d9f4      	bls.n	8004c06 <_printf_i+0x112>
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d10b      	bne.n	8004c38 <_printf_i+0x144>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	07df      	lsls	r7, r3, #31
 8004c24:	d508      	bpl.n	8004c38 <_printf_i+0x144>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	6861      	ldr	r1, [r4, #4]
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	bfde      	ittt	le
 8004c2e:	2330      	movle	r3, #48	@ 0x30
 8004c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c38:	1b92      	subs	r2, r2, r6
 8004c3a:	6122      	str	r2, [r4, #16]
 8004c3c:	f8cd a000 	str.w	sl, [sp]
 8004c40:	464b      	mov	r3, r9
 8004c42:	aa03      	add	r2, sp, #12
 8004c44:	4621      	mov	r1, r4
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fee6 	bl	8004a18 <_printf_common>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d14a      	bne.n	8004ce6 <_printf_i+0x1f2>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b004      	add	sp, #16
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	4833      	ldr	r0, [pc, #204]	@ (8004d30 <_printf_i+0x23c>)
 8004c64:	2778      	movs	r7, #120	@ 0x78
 8004c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	6831      	ldr	r1, [r6, #0]
 8004c6e:	061f      	lsls	r7, r3, #24
 8004c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c74:	d402      	bmi.n	8004c7c <_printf_i+0x188>
 8004c76:	065f      	lsls	r7, r3, #25
 8004c78:	bf48      	it	mi
 8004c7a:	b2ad      	uxthmi	r5, r5
 8004c7c:	6031      	str	r1, [r6, #0]
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	bf44      	itt	mi
 8004c82:	f043 0320 	orrmi.w	r3, r3, #32
 8004c86:	6023      	strmi	r3, [r4, #0]
 8004c88:	b11d      	cbz	r5, 8004c92 <_printf_i+0x19e>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	e7ac      	b.n	8004be8 <_printf_i+0xf4>
 8004c8e:	4827      	ldr	r0, [pc, #156]	@ (8004d2c <_printf_i+0x238>)
 8004c90:	e7e9      	b.n	8004c66 <_printf_i+0x172>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f023 0320 	bic.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	e7f6      	b.n	8004c8a <_printf_i+0x196>
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	e7bd      	b.n	8004c1c <_printf_i+0x128>
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	1d18      	adds	r0, r3, #4
 8004ca8:	6030      	str	r0, [r6, #0]
 8004caa:	062e      	lsls	r6, r5, #24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	d501      	bpl.n	8004cb4 <_printf_i+0x1c0>
 8004cb0:	6019      	str	r1, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <_printf_i+0x1c6>
 8004cb4:	0668      	lsls	r0, r5, #25
 8004cb6:	d5fb      	bpl.n	8004cb0 <_printf_i+0x1bc>
 8004cb8:	8019      	strh	r1, [r3, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	4616      	mov	r6, r2
 8004cc0:	e7bc      	b.n	8004c3c <_printf_i+0x148>
 8004cc2:	6833      	ldr	r3, [r6, #0]
 8004cc4:	1d1a      	adds	r2, r3, #4
 8004cc6:	6032      	str	r2, [r6, #0]
 8004cc8:	681e      	ldr	r6, [r3, #0]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7fb fa86 	bl	80001e0 <memchr>
 8004cd4:	b108      	cbz	r0, 8004cda <_printf_i+0x1e6>
 8004cd6:	1b80      	subs	r0, r0, r6
 8004cd8:	6060      	str	r0, [r4, #4]
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	6123      	str	r3, [r4, #16]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ce4:	e7aa      	b.n	8004c3c <_printf_i+0x148>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4649      	mov	r1, r9
 8004cec:	4640      	mov	r0, r8
 8004cee:	47d0      	blx	sl
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d0ad      	beq.n	8004c50 <_printf_i+0x15c>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	079b      	lsls	r3, r3, #30
 8004cf8:	d413      	bmi.n	8004d22 <_printf_i+0x22e>
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	bfb8      	it	lt
 8004d02:	4618      	movlt	r0, r3
 8004d04:	e7a6      	b.n	8004c54 <_printf_i+0x160>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	47d0      	blx	sl
 8004d10:	3001      	adds	r0, #1
 8004d12:	d09d      	beq.n	8004c50 <_printf_i+0x15c>
 8004d14:	3501      	adds	r5, #1
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	9903      	ldr	r1, [sp, #12]
 8004d1a:	1a5b      	subs	r3, r3, r1
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dcf2      	bgt.n	8004d06 <_printf_i+0x212>
 8004d20:	e7eb      	b.n	8004cfa <_printf_i+0x206>
 8004d22:	2500      	movs	r5, #0
 8004d24:	f104 0619 	add.w	r6, r4, #25
 8004d28:	e7f5      	b.n	8004d16 <_printf_i+0x222>
 8004d2a:	bf00      	nop
 8004d2c:	08005579 	.word	0x08005579
 8004d30:	0800558a 	.word	0x0800558a

08004d34 <_sbrk_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d06      	ldr	r5, [pc, #24]	@ (8004d50 <_sbrk_r+0x1c>)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7fc fb2e 	bl	80013a0 <_sbrk>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_sbrk_r+0x1a>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_sbrk_r+0x1a>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	200007b4 	.word	0x200007b4

08004d54 <_realloc_r>:
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4615      	mov	r5, r2
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	b921      	cbnz	r1, 8004d6a <_realloc_r+0x16>
 8004d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4611      	mov	r1, r2
 8004d66:	f7ff bc73 	b.w	8004650 <_malloc_r>
 8004d6a:	b92a      	cbnz	r2, 8004d78 <_realloc_r+0x24>
 8004d6c:	f7ff fc04 	bl	8004578 <_free_r>
 8004d70:	2400      	movs	r4, #0
 8004d72:	4620      	mov	r0, r4
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	f000 f81a 	bl	8004db0 <_malloc_usable_size_r>
 8004d7c:	4285      	cmp	r5, r0
 8004d7e:	4606      	mov	r6, r0
 8004d80:	d802      	bhi.n	8004d88 <_realloc_r+0x34>
 8004d82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d86:	d8f4      	bhi.n	8004d72 <_realloc_r+0x1e>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	f7ff fc60 	bl	8004650 <_malloc_r>
 8004d90:	4607      	mov	r7, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0ec      	beq.n	8004d70 <_realloc_r+0x1c>
 8004d96:	42b5      	cmp	r5, r6
 8004d98:	462a      	mov	r2, r5
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	bf28      	it	cs
 8004d9e:	4632      	movcs	r2, r6
 8004da0:	f7ff fbdc 	bl	800455c <memcpy>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7ff fbe6 	bl	8004578 <_free_r>
 8004dac:	463c      	mov	r4, r7
 8004dae:	e7e0      	b.n	8004d72 <_realloc_r+0x1e>

08004db0 <_malloc_usable_size_r>:
 8004db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db4:	1f18      	subs	r0, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfbc      	itt	lt
 8004dba:	580b      	ldrlt	r3, [r1, r0]
 8004dbc:	18c0      	addlt	r0, r0, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
